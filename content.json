{"pages":[],"posts":[{"title":"nodejs实现formdata上传文件","text":"1.关于 formdata XMLHttpRequest Level 2 添加了一个新的接口——FormData。利用 FormData 对象，我们可以通过 JavaScript 用一些键值对来模拟一系列表单控件，我们还可以使用 XMLHttpRequest 的 send() 方法来异步的提交表单。与普通的 Ajax 相比，使用 FormData 的最大优点就是我们可以异步上传二进制文件。FormData 的 api 方法一创建一个空 FormData 对象：var formData = new FormData()使用 FormData.append 添加一个键/值对：formData.append('username', 'Chris'); 方法二：利用 form 表单传递给 formdata123456789101112131415&lt;form id=\"myForm\" name=\"myForm\"&gt; &lt;div&gt; &lt;label for=\"username\"&gt;Enter name:&lt;/label&gt; &lt;input type=\"text\" id=\"username\" name=\"username\" /&gt; &lt;/div&gt; &lt;div&gt; &lt;label for=\"useracc\"&gt;Enter account number:&lt;/label&gt; &lt;input type=\"text\" id=\"useracc\" name=\"useracc\" /&gt; &lt;/div&gt; &lt;div&gt; &lt;label for=\"userfile\"&gt;Upload file:&lt;/label&gt; &lt;input type=\"file\" id=\"userfile\" name=\"userfile\" /&gt; &lt;/div&gt; &lt;input type=\"submit\" value=\"Submit!\" /&gt;&lt;/form&gt; 12var myForm = document.getElementById('myForm');formData = new FormData(myForm); 2.formdata 上传文件目录结构1234567.├── index.js├── node_modules├── package.json└── public ├── index.html └── uploads 客户端代码1234567891011121314151617181920212223242526&lt;!-- index.html --&gt;&lt;input id=\"file\" type=\"file\" /&gt;&lt;button id=\"btn\"&gt;点击上传&lt;/button&gt;&lt;img id=\"img\" src=\"\" alt=\"\" /&gt;&lt;script&gt; var btn = document.getElementById('btn'), file = document.getElementById('file'), img = document.getElementById('img'); btn.onclick = function() { // 获取文件 var upload_file = file.files[0], formdata = new FormData(), xhr = new XMLHttpRequest(); formdata.append('date', new Date().toLocaleString()); // 将文件添加到formdata对象中，（注：下面的file字段名在node中有用） formdata.append('file', upload_file); xhr.open('POST', '/upload', true); xhr.onreadystatechange = function() { if (xhr.readyState == 4 &amp;&amp; xhr.status == 200) { img.src = xhr.responseText; } }; xhr.send(formdata); };&lt;/script&gt; 服务端代码123456789101112131415161718192021222324252627282930313233343536373839// index.jsvar express = require('express');var app = express();/* 1. 保存在文件夹中的文件为二进制，所以想在本地点开能预览的，取消下面fs模块引用的注释 2. 并在命令行中输入 npm install fs --save*/// var fs = require(\"fs\");var multer = require('multer');// 这里dest对应的值是你要将上传的文件存的文件夹var upload = multer({ dest: './public/uploads' });app.use(express.static('./public'));app.post('/upload', upload.single('file'), (req, res) =&gt; { // req.file 是 'file' 文件的信息 （前端传递的文件类型在req.file中获取） // req.body 将具有文本域数据，如果存在的话 。（上面前端代码中传递的date字段在req.body中获取） console.log(req.body); //{ date: '2018/1/20 下午5:25:56' } // ---------- 因为保存的文件为二进制，取消下面代码块注释可让保存的图片文件在本地文件夹中预览 ------ /* var file_type; if (req.file.mimetype.split('/')[0] == 'image') file_type = '.' + req.file.mimetype.split('/')[1]; if (file_type) { fs.rename(req.file.path, req.file.path + file_type, function (err, doc) { if (err) { console.error(err); return; } console.log('55'); res.send('./uploads/' + req.file.filename + file_type) }) return; } */ // --------------------- res.send('./uploads/' + req.file.filename);});app.listen(9999); 接下来解释下上述代码 上面的例子是上传图片，服务端传回图片路径进行展示。上传其他文件同理！ index.js 中依赖 express、multer 可以通过npm install express multer --save进行安装，当然你也可以不使用 express。接下去重点讲述下 multer： 1.安装：npm install --save multer 2.使用：multer(opts) Multer 接受一个 options 对象，其中最基本的是 dest 属性，这将告诉 Multer 将上传文件保存在哪。如果你省略 options 对象，这些文件将保存在内存中，永远不会写入磁盘。通常，只需要设置 dest 属性 像这样：var upload = multer({ dest: 'uploads/' }) // dest对应的值就是你想文件存储的文件夹single(fieldname)接受一个以 fieldname 命名的文件。这个文件的信息保存在 req.file。（这里的 fieldname 指的是 formdata.append(“file”,文件）中的’file’字段。其他方法详见multer 文档。 Multer 会添加一个 body 对象 以及 file 或 files 对象 到 express 的 request 对象中。body 对象包含表单的文本域信息，file 或 files 对象包含对象表单上传的文件信息。 123456app.post('/upload', upload.single('file'), (req, res) =&gt; { // req.file 是 'file' 文件的信息 （前端传递的文件类型在req.file中获取） // req.body 将具有文本域数据，如果存在的话 。（上面前端代码中传递的date字段在req.body中获取） console.log(req.body); // { date: '2018/1/20 下午5:25:56' } res.send('./uploads/' + req.file.filename);}); 注意事项一、formdata 在控制台打印为空 可通过下面方法获取： 1234567var formData = new FormData();formData.append('username', 'Chris');formData.append('username', 'Bob');// get()函数只会返回username附加的第一个值formData.get('username'); // Returns \"Chris\"// getAll()函数将返回username一个数组中的两个值：formData.getAll('username'); // Returns [\"Chris\", \"Bob\"] 更多 formdata 方法 二、如果 formdata 添加文件成功了的话，还是上传失败，可以看看头部是否为multipart/form-data 文章都是学习过程中的总结，如果发现错误，欢迎留言指出","link":"/blog/2020/03/29/node.js%E5%AE%9E%E7%8E%B0formdata%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/"},{"title":"基于react、socket.io、node.js仿微信开发","text":"前言这个项目是我自学 react+redux 的第一个项目，并结合自己之前所学的 node+mongodb，来模仿开发微信客户端。利用每天下班时间边学习边写。由于本人技术水平有限，比较适合新手。目前还没有写完。喜欢的话可以帮忙给我 github 点个 star ^_^ 项目地址https://github.com/zhouatie/wechat 技术栈react+redux+react-router4+socket.io+axios+node.js+mongodb 说明1234本地启动mongodb服务分别进入wechat跟server文件夹npm installwechat里npm run startserver里node app.js 和 chat.js 这两个文件 开发环境：macbook pro 、vscode、Chrome、node 如果 npm install 太慢导致有些 npm 依赖包下载失败 你可以看控制台的报错信息，再手动 npm install 具体的开发包，推荐使用淘宝的注册源，直接运行 npm install -g cnpm --registry=https://registry.npm.taobao.org 目标功能 [√] 注册 [√] 登录 [√] 添加好友 [√] 支持私聊 [√] 消息列表的展示 [√] 未读消息数量的显示 [√] axios 数据跨域的设置 群聊 [√] 上传头像 [√] 个人信息的编辑 朋友圈 部分截图 总结1.之前写 vue 项目的时候，在 main.js 文件中写 express 接口，就行了，就不存在跨域问题。在 create-react-app 启动的静态资源服务中，实在找不到哪里可以写接口，找了好久的 node_modules ，都不知道在哪里下手。好在 create-react-app 中的 package.json 中加上：proxy:http://localhost:4000就能解决跨域问题了。 2.在 app.js 页面中，使用的是 express 框架，写 socket.io 不知道为什么会提醒跨域问题，而我前面的登录接口用 axios 跨域就没有问题，而且我在 express 的头部做了 CORS 处理，还是存在跨域问题。所以只能另启了一个 node 服务，采用原生 node.js 编写，跨域就成功了。但是我在新写的服务中，换成用 express 框架，结果也提示了存在跨域问题。目前个人猜测 express 可能有什么跨域机制。 3.在引入 react-router4 的时候遇到了很多疑难杂症，晚上大部分的 react-router4 一下的版本。按照网上来做，好多报错，到处找博客找文章。后来通过 react-router 英文文档的阅读解决了各种报错问题。 4.我是通过 redux 来更新消息列表，中间出现 store 数据更新了，组件却不渲染。后来求助好友后，原来是我强制修改了 state 导致页面无法即使刷新。 5.formdata 上传文件，相当于表单上传，头部为Content-Type:multipart/form-data,这点要注意了！ 注意: Multer 不会处理任何非 multipart/form-data 类型的表单数据。具体见 multer 12345678910111213141516var multer = require('multer');var upload = multer({ dest: '../wechat/public/logos' }); // dest 指的是图片存到哪个文件夹里// 上传头像app.post('/uploadLogo', upload.single('avatar'), (req, res) =&gt; { User.update( { _id: req.body.id }, { $set: { logo: './logos/' + req.file.filename } }, function() { res.send({ status: 'success', url: './logos/' + req.file.filename }); } );}); 参考资料《深入浅出 React 和 Redux》– 程墨 《MongoDB 实战（第二版）》 react-router react redux 中文文档 mongoose 基于 Vue、Nodejs、Socket.io 的聊天应用 multer 文章都是学习过程中的总结，如果发现错误，欢迎留言指出","link":"/blog/2020/03/29/%E5%9F%BA%E4%BA%8Ereact%E3%80%81socket-io%E3%80%81node-js%E4%BB%BF%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/"},{"title":"原生js实现移动端选择器插件","text":"前言插件功能只满足我司业务需求，如果希望有更多功能的，可在下方留言，我尽量扩展！如果你有需要或者喜欢的话，可以给我 github 来个 star ? 仓库地址 在线预览(记得将浏览器切换到手机模式) 预览 准备首先在页面中引入 css,js 文件 每次需要弹出该组件时通过 new 一个实例来生成，代码如下: 123456789101112131415var data = { 1:{ 2:[3,4] }}var pickerView = new PickerView({ bindElem: elem, // 绑定的元素,用于区别多个组件存在时回显区别，如果单个可以随意填某个元素 data: data, // 说明：该参数必须符合json格式 且最里层是个数组，如上面的data变量所展示的[3,4]。 title: '标题2', // 顶部标题文本 默认为“标题” leftText: '取消', // 头部左侧按钮文本 默认为‘取消’ rightText: '确定', // 头部右侧按钮文本 默认为“确定” rightFn: function( selectArr ){ // 点击头部右侧按钮的回调函数，参数为一个数组，数组对应滚轮中每项对应的值 }}); 字段介绍如上注释，滚轮的数量取决于你 json 嵌套的层数。如下： 1var data = [1, 2, 3]; 1234var data = { \"小明家\":[\"小明爸爸\",\"小明妈妈\",\"小明爷爷\",\"小明奶奶\",\"小明爸爸\",\"小明妈妈\",\"小明爷爷\",\"小明奶奶\"], \"小红家\":[\"小红爸爸\",\"小红妈妈\"]} 案例123&lt;!-- html --&gt;&lt;button style=\"font-size:50px;\" id=\"btn\"&gt;按钮&lt;/button&gt;&lt;div class=\"showText\"&gt;&lt;/div&gt; button 标签是用来每次点击的时候打开组件 div 标签用来展示选择的内容 1234567891011121314151617181920212223242526272829//js// var data = 地级市json数据，过大 就不展示了var data = { \"小明家\":{ \"小明爸爸\":[1,2,6,7,7,8,8,9,0,6,98,76,5], \"小明妈妈\":[3,4] }, \"小红家\":{ \"小红爸爸\":[5,6], \"小红妈妈\":[7,8] }}var btn = document.getElementById(\"btn\");btn.onclick = function(){ var pickerView = new PickerView({ bindElem: btn, data: data, title: '家庭', leftText: '取消', rightText: '确定', rightFn: function( selectArr ){ console.log(selectArr,'selectarr'); // 将家庭成员展示到showText类名的div中 document.querySelector(\".showText\").innerText = selectArr.join(\"-\"); } });} 说明： 每次显示组件的时候都需要 new 一个实例，如上 button 标签每次被点击的时候都 new 一个。效果如下： 结尾如有什么功能需要增加的，可在评论区留言，我尽量满足。如有什么疏忽或错误，希望您指出。我会尽早修改，以免误导他人。","link":"/blog/2020/03/30/%E5%8E%9F%E7%94%9Fjs%E5%AE%9E%E7%8E%B0%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%89%E6%8B%A9%E5%99%A8%E6%8F%92%E4%BB%B6/"},{"title":"原生js实现省市区三级联动插件","text":"前言插件功能只满足我司业务需求，如果希望有更多功能的，可在下方留言，我尽量扩展！如果你有需要或者喜欢的话，可以给我 github 来个 star ? 仓库地址 在线预览 准备12// 页面上先引入css与js文件&lt;div id=\"wrap\"&gt;&lt;/div&gt; 页面中的容器标签不限制，只需给个 id 就行 12345678910var address = new Address({ wrapId: 'wrap', showArr: ['provinces','citys','areas'], beforeCreat:function(){ console.log(\"beforeCreat\") }, afterCreat:function(){ console.log('afterCreat'); }}) wrapId:&quot;wrap&quot; // 此处的wrap就是上面容器的id showArr: ['provinces','citys','areas'] // 此处分别代表省、市、区容器的id 举个例子：如果传递的数组['provinces','citys','areas']长度为 3，那么将会出现省市区，数组中三个字符串分别是省、市、区容器的 id 如传递的数组['provinces','citys']长度为 2，那么将会出现省市，数组中的两个字符串分别是省、市容器的 id 如数组长度为 1 的时候就不说了 beforeCreat 插件开始创建前执行的回调函数 afterCreat 插件创建完成后执行的回调函数 预览 总结如有什么功能需要增加的，可在评论区留言，我尽量满足。如有什么疏忽或错误，希望您指出。我会尽早修改，以免误导他人。","link":"/blog/2020/03/30/%E5%8E%9F%E7%94%9Fjs%E5%AE%9E%E7%8E%B0%E7%9C%81%E5%B8%82%E5%8C%BA%E4%B8%89%E7%BA%A7%E8%81%94%E5%8A%A8%E6%8F%92%E4%BB%B6/"},{"title":"原生js实现拖拽缩放预览图片插件","text":"前言插件功能暂只满足我司业务需求，如果希望有更多的功能，可在下方留言，我尽量扩展！如果你有需要或者喜欢的话，可以给我 github 来个 star ? 仓库地址 &gt; 在线预览 准备 引入 preview.js 文件 指定一个容器的 id，插件只预览该容器内的图片，举个栗子?： 1234567&lt;div id=\"wrap\"&gt; &lt;div&gt; &lt;img src=\"./data/girl1.jpg\" alt=\"\" /&gt; &lt;/div&gt; &lt;img src=\"./data/girl2.jpg\" alt=\"\" /&gt; &lt;img src=\"./data/girl3.jpg\" alt=\"\" /&gt;&lt;/div&gt; 其中 id 为 wrap 的 div 就是 2 中所指的容器。插件只预览该容器下的所有图片。 123var preview = new Preview({ imgWrap: 'wrap' // 指定该容器里的图片点击预览}) imgWrap 键的值就是容器的 id 如果觉得样式不满意什么的，可以直接 css 覆盖就可以了。 预览 总结如有疏忽或错误，希望您及时指出，我会尽早修改?。有什么需要交流的可在评论区与我交流","link":"/blog/2020/03/30/%E5%8E%9F%E7%94%9Fjs%E5%AE%9E%E7%8E%B0%E6%8B%96%E6%8B%BD%E7%BC%A9%E6%94%BE%E9%A2%84%E8%A7%88%E5%9B%BE%E7%89%87%E6%8F%92%E4%BB%B6/"}],"tags":[{"name":"react","slug":"react","link":"/blog/tags/react/"},{"name":"node","slug":"node","link":"/blog/tags/node/"},{"name":"socket.io","slug":"socket-io","link":"/blog/tags/socket-io/"},{"name":"formdata","slug":"formdata","link":"/blog/tags/formdata/"},{"name":"plugin","slug":"plugin","link":"/blog/tags/plugin/"},{"name":"image-preview","slug":"image-preview","link":"/blog/tags/image-preview/"}],"categories":[]}